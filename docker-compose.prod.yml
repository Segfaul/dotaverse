version: '3.9'
name: dotaverse_app_prod
services:
  postgres:
    image: postgres:16
    ports:
      - "5432:5432"
    env_file:
      - .env
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    networks:
      - dotaverse-prod

  backend:
    build:
      context: ./
      dockerfile: ./backend/Dockerfile
    command:  bash -c 'while !</dev/tcp/postgres/5432; do sleep 1; done; 
      alembic -c backend/alembic.ini revision --autogenerate -m "first_commit";
      alembic -c backend/alembic.ini upgrade head;
      gunicorn --config backend/config/glog.py backend.api.main:app'
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/dotaverse/backend
      - ./logs-data:/dotaverse/logs
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_URL=redis://redis:6379/
      - LOG_FILE_PATH=logs/dotaverse.log
    depends_on:
      - "redis"
      - "postgres"
    networks:
      - dotaverse-prod

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - dotaverse-prod
  
  rabbitmq:
    image: rabbitmq:3.13.2-management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - dotaverse-prod
  
  celery:
    build:
      context: ./
      dockerfile: ./backend/Dockerfile
    command: celery -A backend.api.celery.worker:celery worker -B --loglevel=WARNING --concurrency=2 --loglevel=WARNING -f logs/dotaverse.log
    volumes:
      - ./backend:/dotaverse/backend
      - ./logs-data:/dotaverse/logs
    environment:
      - POSTGRES_HOST=postgres
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672/
      - LOG_FILE_PATH=logs/dotaverse.log
    depends_on:
      - "redis"
      - "rabbitmq"
      - "postgres"
      - "backend"
    networks:
      - dotaverse-prod

  frontend:
    build:
      context: ./
      dockerfile: ./frontend/Dockerfile
    ports:
      - "3000:3000"
    command:  bash -c 'npm run build'
    volumes:
      - ./frontend/build:/frontend/build
      - /frontend/node_modules
    networks:
      - dotaverse-prod
  
  nginx:
    image: nginx:1.25
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - .env
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/build:/usr/share/nginx/html:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - backend
      - frontend
    networks:
      - dotaverse-prod
  
  certbot:
    image: certbot/certbot
    env_file:
      - .env
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --keep-until-expiring --email ${SERVER_EMAIL} -d ${SERVER_NAME} --agree-tos
    networks:
      - dotaverse-prod


networks:
  dotaverse-prod:
    driver: bridge

volumes:
  postgres-data:
  logs-data:
